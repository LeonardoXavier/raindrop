<?xml version="1.0" encoding="UTF-8"?>
<xbl:xbl
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xbl="http://www.w3.org/ns/xbl">

  <xbl:binding id="conversation-reader">
    <xbl:template>
      <div id="toolbox" class="toolbox">
        <div class="toolbar">
          <button tabindex="-1">Junk</button>
          <button tabindex="-1">Delete</button>
        </div>
        <div id="subject" class="subject"></div>
        <div class="between">
          Between <span id="participants" class="recipients"></span>
        </div>
      </div>
      <div id="threader" class="threader">
        <ul id="threadroot" class="thread"></ul>
        <div style="font-size:x-small;margin-top:2em;">
          <div><a id="expandAll">Expand All</a></div>
          <div><a id="collapseAll">Collapse All</a></div>
        </div>
      </div>
      <div id="conversation" class="main">
        <div id="messages" class="messages"/>
      </div>
    </xbl:template>
    <xbl:resources>
      <xbl:style><![CDATA[
:bound-element { display: block; max-width: 50em; padding: 0em;
                         padding-right: 1em;
                         padding-bottom: 10em; }

.main { margin-left:12em; max-width:40em; position: relative; }

.toolbox { margin-bottom: 1em;
           padding-left:1em; padding-right: 2em;
           width: 100%; /* .main + .thread */
           z-index: 1; /* push above the pos:relative .main element */
           background-color: #f8f8f8;
           border-bottom: 1px solid #ccc;
           border-right: 1px solid #ccc; -moz-border-radius-bottomright: 0.4em;
           position: fixed; top: 0em; left: 0em; opacity: 0.9;
         }
.toolbox:hover { opacity: 1; }

.toolbox > .toolbar { float: right; margin-top: 0.5em; }
.toolbox > .toolbar button { font-size: small; }

.subject { font-weight: bold; margin: 0.5em 0em; }
.between { font-size: small; margin: 0.5em 0em; }

.threader { position: fixed; width: 12em; }

.threader ul { font-size: small; margin: 0em; padding: 0em;
               border-left: 0.3em solid transparent; }
.threader ul.selected { border-color: #cee1ef; }

      ]]></xbl:style>
    </xbl:resources>
    <xbl:implementation><![CDATA[
      ({
        conversation: null,
        setConversation: function(aConversation) {
          this.conversation = aConversation;
          this.expandedMessageIds = {};
          this.selectedMessage = null;

          this.shadowTree.getElementById("subject").textContent =
            this.conversation.subject;

          var threadRoot = this.shadowTree.getElementById("threadroot");
          var topnodes = this.conversation.threadMessages();
          console.log("top nodes", topnodes);
          for (var iTopNode = 0; iTopNode < topnodes.length; iTopNode++) {
            var topmessage = topnodes[iTopNode];
            console.log("top node", iTopNode, topmessage);

            // - thread tree
            console.log("creating thread node");
            var threadnode = $("<li/>").attr("id", "thread" + topmessage._id)
                                       .appendTo(threadRoot)[0];
            ElementXBL.prototype.addBinding.call(threadnode,
                                                 "conversation.xml#threadnode");
            threadnode.setMessage(topmessage);

            // - actual messages list
            console.log("creating message node");
            this.addMessageNode(topmessage);
          }

          // -- pretty up the participants
          // this.conversation.involves has got the data

          // -- layout stuff that probably should not go here but rather in
          //  the bind event or what not
          this.positionFixedElements();
          var dis = this;
          $(window).resize(function() { dis.positionFixedElements(); });
        },
        addMessageNode: function(aMessage) {
          var messagesRoot = this.shadowTree.getElementById("messages");
          var messageNode = $("<div/>").appendTo(messagesRoot)[0];
          ElementXBL.prototype.addBinding.call(messageNode,
                                               "conversation.xml#conv-message");
          console.log("setMessage with", aMessage);
          messageNode.setMessage(aMessage);

          if (aMessage._children) {
            for (var iChild = 0; iChild < aMessage._children.length; iChild++) {
              var childMessage = aMessage._children[iChild];
              this.addMessageNode(childMessage);
            }
          }
        },
        expand: function(aMessages) {

        },
        positionFixedElements: function() {
          var toolboxNode = this.shadowTree.getElementById("toolbox");
          $(toolboxNode).width($(this.boundElement).width());
          var top = $(toolboxNode).height() + 10;
          var threaderNode = this.shadowTree.getElementById("threader");
          $(threaderNode).css("top", top);

          var conversationNode = this.shadowTree.getElementById("conversation");
          $(conversationNode).css("top", top);
        }
      })
    ]]></xbl:implementation>
    <xbl:handlers>
      <xbl:handler event="click"><![CDATA[

      ]]></xbl:handler>
    </xbl:handlers>
  </xbl:binding>

  <!-- Thread Node -->
  <xbl:binding id="threadnode">
    <xbl:template>
      <span id="name"/>
    </xbl:template>
    <xbl:resources>
      <xbl:style><![CDATA[
:bound-element { white-space: nowrap; overflow: hidden; margin: 0px;
                 margin-right: 1em; cursor: pointer; padding: 0.2em 0em;
                 -moz-border-radius-topright: 0.3em;
                 -moz-border-radius-bottomright: 0.3em;
               }
:bound-element[unread="true"] { font-weight: bold; }
:bound-element.selected { color: #111; background-color: #cee1ef; }
:bound-element:hover { background-color: #eaf3fa;  }

:bound-element > .name { padding: 0.1em 0.5em; }
:bound-element > .name:hover { text-decoration: underline; }
      ]]></xbl:style>
    </xbl:resources>
    <xbl:implementation><![CDATA[
      ({
        message: null,
        setMessage: function(aMessage) {
          this.message = aMessage;
          var nameNode = this.shadowTree.getElementById("name")
          nameNode.textContent = this.message.from.name;
          nameNode.setAttribute("unread", !this.message.read);

          if (this.message._children) {
            var children = this.message._children;
            var ulNode = $("<ul/>").addClass("thread")
                                   .appendTo(this.boundElement.parentNode);
            for (var iChild = 0; iChild < children.length; iChild++) {
              var child = children[iChild];
              var threadNode = $("<li/>").attr("type", "threadnode")
                                         .attr("id", "thread" + child._id)
                                         .attr("unread", child.read)
                                         .appendTo(ulNode)[0];
              ElementXBL.prototype.addBinding.call(threadNode,
                "conversation.xml#threadnode");
              threadNode.setMessage(child);
            }
          }
        },
        select: function() {
          $(this.boundElement).addClass("selected")
                              .parent().addClass("selected");
        },
        unselect: function() {
          $(this.boundElement).removeClass("selected")
                              .parent().removeClass("selected");
        }
      })
    ]]></xbl:implementation>
    <xbl:handlers>
      <xbl:handler event="click"><![CDATA[

      ]]></xbl:handler>
    </xbl:handlers>
  </xbl:binding>

  <!-- Message in a Conversation -->
    <xbl:binding id="conv-message">
    <xbl:template>
      <div class="header">
        <div class="headers">
          <div class="meta">
            <div>
              <span id="attachments" class="attachments">
                <span id="attachmentcount" class="count"></span>
                <img src="file:///usr/share/icons/gnome/16x16/status/stock_attach.png" />
              </span>
              <span id="date" class="time"></span>
            </div>
            <div class="actions">
              <button>reply all | v</button>
            </div>
          </div>
          <div class="details">
            <div class="participants">
              <span id="sender" class="sender"></span>
            </div>
            <div id="snippet" class="snippet"></div>
          </div>
        </div>
      </div>
      <div class="body">
        <div id="attachments-list" class="attachments-list">
          <div>attachments</div>
          <ul id="attachment_ul"></ul>
        </div>
        <div id="iframe" class="content"></div>
        <div class="attachments-area"></div>
        <div class="actions">
          <button>reply all | v</button>
          <button>forward</button>
          <button>other actions | v</button>
        </div>
      </div>
    </xbl:template>
    <xbl:resources>
      <xbl:style><![CDATA[
:bound-element { max-width: 38em; min-width: 22em; border: 1px solid #ddd;
           border-bottom: none;
           margin: -0.3em 1em;
           -moz-border-radius-topright: 0.3em;
           -moz-border-radius-topleft: 0.3em; }
:bound-element:last-child { border-bottom: 1px solid #ddd;
                      -moz-border-radius-bottomright: 0.3em;
                      -moz-border-radius-bottomleft: 0.3em; }

:bound-element .header { padding: 0.3em 0.5em; }

:bound-element .header .actions { display: none; text-align: right; }
:bound-element .header .actions button { font-size: x-small; padding: 0em 0.2em; }

:bound-element .header .headers { color: #222; }

:bound-element .header .headers .meta { float: right; padding-left: 1em; }
:bound-element .header .headers .meta .attachments { }
:bound-element .header .headers .meta .attachments .count { font-size: small; }
:bound-element .header .headers .meta .attachments img { vertical-align: middle; }
:bound-element .header .headers .meta .time { font-size: small; color: #444; }

:bound-element .header .headers .details .participants { }
:bound-element .header .headers .details .participants .sender { }
:bound-element[unread="true"] .header .headers .details .participants .sender { font-weight: bold; }
:bound-element .header .headers .details .participants .delta { }
:bound-element .header .headers .details .snippet { color: #777; padding-left: 2em;
                                              font-size: small;
                                              white-space: nowrap;
                                              overflow: hidden; }
:bound-element[unread="true"] .header .headers .details .snippet { font-weight: bold; }

:bound-element { display: block; }

:bound-element .body { display: none; }
:bound-element .body .attachments-list { font-size: small; margin: 0.5em;
                                   margin-left: 1em; list-style: none;
                                   padding: 0em; }
:bound-element .body .attachments-list { background-color: #f3f3f3; padding: 0.5em; -moz-border-radius: 0.3em; }
:bound-element .body .attachments-list ul { margin-left: 0.5em; }
:bound-element .body .content { color: #111; padding: 0.5em; }
:bound-element .body .attachments-area { }
:bound-element .body .actions { padding: 0.5em; background-color: #f3f3f3;
                                         -moz-border-radius-bottomright: 0.3em;
                                         -moz-border-radius-bottomleft: 0.3em; }

#iframe.content { width: 36em; border: none; overflow: visible}

:bound-element.expanded { max-width: 40em;
                    margin: 0em; border-color: #666;
                    border-bottom: 1px solid #666; -moz-border-radius: 0.3em;
                    background-color: #fff;
                    /*-moz-box-shadow: #ccc 1px 1px 1px 1px;*/
                    }
:bound-element.expanded + :bound-element:not(.expanded) { border-top: none; margin-top: 0px; -moz-border-radius-topleft: 0em; -moz-border-radius-topright: 0em; }
:bound-element.expanded + :bound-element.expanded { margin-top: 0.5em; }

:bound-element.expanded .body { display: block; }
:bound-element.expanded .header .actions { display: block; }
:bound-element.expanded .header .headers .meta .toggle { display: block }
:bound-element.expanded .header .headers .details .snippet { visibility: hidden; }
:bound-element.expanded .header .headers .details .toggle { display: inline; }

      ]]></xbl:style>
    </xbl:resources>
    <xbl:implementation><![CDATA[
      ({
        message: null,
        setMessage: function(aMessage) {
          this.message = aMessage;

          this.shadowTree.getElementById("date").textContent =
            makeTimestampFriendly(this.message.timestamp);
          this.shadowTree.getElementById("sender").textContent =
            this.message.from.name;

          this.shadowTree.getElementById("snippet").textContent =
            this.message.bodySnippet;
          this.shadowTree.getElementById("iframe").textContent =
            this.message.bodyText;

          var nameNode = this.shadowTree.getElementById("sender")
          nameNode.textContent = this.message.from.name;
          nameNode.setAttribute("unread", !this.message.read);

        },
        select: function() {
          $(this.boundElement).addClass("selected")
                              .parent().addClass("selected");
        },
        unselect: function() {
          $(this.boundElement).removeClass("selected")
                              .parent().removeClass("selected");
        }
      })
    ]]></xbl:implementation>
    <xbl:handlers>
      <xbl:handler event="click"><![CDATA[

      ]]></xbl:handler>
    </xbl:handlers>
  </xbl:binding>


</xbl:xbl>
