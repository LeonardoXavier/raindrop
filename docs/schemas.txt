 ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1

 The contents of this file are subject to the Mozilla Public License Version
 1.1 (the "License"); you may not use this file except in compliance with
 the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/

 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 for the specific language governing rights and limitations under the
 License.

 The Original Code is Raindrop.

 The Initial Developer of the Original Code is
 Mozilla Messaging, Inc..
 Portions created by the Initial Developer are Copyright (C) 2009
 the Initial Developer. All Rights Reserved.

 Contributor(s):


Eventually we want schema definitions to live in the couch, along
with other fancy things, such as validators etc.

But for now, this is where the schema are defined.

COMMON:
=======
rd.tags:
--------
** Notes **
Anything can have tags!

** Fields **
tags: a list of tags!

MESSAGES:
=========

rd.msg.body
-----------
** Notes **
This is named 'body' in anticipation of splitting the "envelope" 
(ie, to, from, etc) related fields into their own schema - but that
is yet to happen.

** Fields **
from:  An identity ID (presumably initially an 'email' one, but other
extensions may replace with something else.)

subject: the subject of the message. 
body: the body

body_preview: Short preview of the message.

from: An identity ID
from_display: display name for the identity ID

to, cc: Lists of identity IDs
to_display, cc_display: Lists of display names


rd.msg.rfc822:
--------------
** Notes **
A schema designed to store a raw RFC822 stream

** Fields **

rfc822: attachment holding a raw rfc822 message stream.

rd.msg.email:
--------------
** Notes **
A deconstructed email message.  Note that body and envelope information
isn't stored here - extensions emiting one of these schemas will almost
certainly also emit a rd.msg.body schema which should be used.

** Fields **

headers: a dictionary holding all headers.  Header names have been lower-cased
and duplicate headers concatenated

text: only exists for non-multipart messages with a main content-type of text.

multipart_info: A list of dictionaries, with each element having elements:
  name: The name of the attachment which holds the data for this part.
  headers: A dictionary holding the headers for this sub-part.
  content_type: The type of the content stored in the attachment

rd.msg.conversation:
--------------------
** Fields **

conversation_id: a string which identifies the conversation.

rd.msg.email.mailing-list:
--------------------------
** Notes **

Information about the mailing list itself is stored in a document
with an rd.mailing-list schema.

** Fields **

list_id: a string that identifies the mailing list through which a message
         is received

rd.msg.recip-target:
--------------------
** Notes **: information about the 'target' of this message (ie, if the
message was targetted at a group, an individual, or was broadcast to many
people)

** Fields **
target: One of 'from', 'direct', 'broadcast' or 'group'.
timestamp: The timestamp of the message itself.  Redundant field used
to help make querying easier.
target-timestamp: Combination of target and timestamp.  Redundant field used
to help make querying easier.


rd.msg.outgoing.smtp:
---------------------
** Fields **

smtp_from: string with smtp 'from' info
smtp_to: list of strings with smtp 'to' info
smtp_body: attachment - the binary SMTP body, including all headers etc.

rd.msg.outgoing.simple:
----------------------

from: identity ID (eg, ['email', 'email@addy'])
from_display: the display name for the 'from' address
cc: optional list of identity IDs
cc_display: list of display names for the CC identities.  Must be same length
            as CC
bcc/bcc_display: as above but for bcc

Outgoing state pseudo-schemas:
------------------------------
The following pseudo-schemas are used by the 'outgoing' message handling
to record the sent state of a message.  This state is stored on the
*source* document (eg, an 'rd.msg.outgoing.simple') rather than on the
raw outgoing document.

[Note: this originally called for 2 dictionaries/objects 'outgoing_state' and
'sent_state', with each object having attributes - but this would currently
make the attributes unavailable to the megaview]

outgoing_state: one of null (meaning 'draft'), 'outgoing' (ie, in the 'outbox'
                or 'sent' (ie, message fully delivered.)
outgoing_state_timestamp: when the out_state was set.  IOW, if 'out_state' is
                   'outgoing', out_timestamp should be when they pressed the
                   'send' button.

sent_state: null, 'sending', 'sent', 'error'
sent_state_timestamp: when the send_state was set.
sent_state_reason: the 'reason' for the failure - may only make sense to
                   the protocol itself (eg, may be the SMTP error code and
                   response string)
sent_state_message: an optional message for the failure for human consumption.


MAILING LISTS:
==============

rd.mailing-list:
----------------
** Notes **

Information about a mailing list through which one or more messages have been
received.  Only the "id" field is required; the others are optional and depend
on their presence in the list-related headers of the message(s) from which
they are derived.

** Fields **

id: the ID of the mailing list, as specified by the list itself; not guaranteed
    to be unique, although we treat it like it is; we should perhaps combine it
    with the domain from which it comes to reduce the possibility of two lists
    with the same IDs being treated as the same list
name: the name of the list, if it provides one; otherwise the front-end derives
      a name from the ID
status: the status of the user's subscription to the list; can be one of
        the following values:
          subscribed: the user is subscribed to the mailing list
          unsubscribe-pending: we have sent a request to the mailing list
              to unsubscribe the user; we are waiting to hear back
          unsubscribe-confirmed: the mailing list requested confirmation
              of the unsubscription request, and we confirmed it
          unsubscribed: the mailing list has notified us that it has
              unsubscribed the user from the list
changed_timestamp: the timestamp (i.e. "Date" header) of the most recent message
                   that caused this list to be changed; used to determine
                   whether or not to try to update a list when getting a message
                   from it; but only updated when something actually changes,
                   not every time Raindrop receives a new message from the list.
post: the value of the list-post header
archive: the value of the list-archive header
help: the value of the list-help header
subscribe: the value of the list-subscribe header
unsubscribe: the value of the list-unsubscribe header


IDENTITIES AND CONTACTS:
========================

rd.contact:
** Fields **
name:


rd.identity.exists:
-------------------
** Fields **

This schema has no fields!  It could have 'identity_id', but the 'rd_key'
for such schemas is always ['identity', identity_id_value].

NOTE: Schemas with no fields are treated specially by the framework; such
records are considered an 'assertion' the object key exists, so conflict
errors are ignored when attempting to write them.

rd.identity:
------------
** Notes **
This is a 'normalized schema' - its a set of fields that any identity provider
might be able to fetch.

** Fields **

name: A display name?
nickname: nickname
url: user's home page
image: Either a URL or reference to an attachment.

rd.identity.contacts:
---------------------
** Fields **
contacts: A list of (contact_id, relationship_name) tuples, where
'relationship_name' can be None or may help differentiate things like phone
numbers or email addresses.

rd.identity.recip-target
------------------------
** Notes **
This is very similar to the rd.msg.recip-target schema and is used to
determine the recip-target values for a message.  This schema is optional - if
it does not exist, the default is to look only at the message attributes.

** Fields **
target: the recip-target value for this sender.  Valid values are the same as
for the rd.msg.recip-target schema.

might be able to fetch.

rd.identity.skype:
rd.identity.twitter:
--------------------

"Private" schemas - whatever the identity fetchers want to store.

ATTACHMENTS
===========

Attachments are first-class raindrop items.  They have an rd_key of format
['attachment', [parent_rdkey, attach_id]].  The parent_rdkey is the full
rd_key of the 'owning' item - generally a message.  Attach_id is a string
uniquely identifying the attachment.

rd.attach.details
----------------
** Notes **
Contains basic information about the 'raw' attachment.

** Fields **
name: a string 'name'.  It is likely this will appear as a 'filename'
rather than a description (ie, it is derived from the source of the
attachment, such as the filename portion of an email attachment)

visible: a boolean indicating if the attachment should be seen.

content_type: The content_type of the attachment.

length: The number of bytes in the attachment.

url: The URL for the attachment.  This may be a 'relative' URL, although when
this schema is accessed via the raindrop REST API, the API will have converted
it to a fully qualified URL which can be used directly.

rd.attach.preview
rd.attach.thumbnail
-------------------
** Notes **
Contains preview infi ormation about an attachment.  These 2 schemas have
identical fields.

** Fields **

content_type: The content-type of the preview.  This may be different than the
content-type of the original attachment.
width: the width in pixels of the preview
height: the height in pixels of the preview
url: The URL for this rendering of the attachment.  As above, this mayh be
a 'relative' URL but will be fully-qualified when accessed via the REST API.
