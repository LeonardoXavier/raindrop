Eventually we want schema definitions to live in the couch, along
with other fancy things, such as validators etc.

But for now, this is where the schema are defined.

MESSAGES:
=========

rd/msg/body
-----------
** Notes **
This is named 'body' in anticipation of splitting the envelope related
fields into their own schema.

** Fields **
from:  An identity ID (presumably initially an 'email' one, but other
extensions may replace with something else.)

body: the body

body_preview:

rd/msg/rfc822:
--------------
** Notes **
A schema designed to store a raw RFC822 stream

** Fields **

rfc822: attachment holding a raw rfc822 message stream.

rd/msg/email:
--------------
** Notes **
A deconstructed email message.  Note that body and envelope information
isn't stored here - extensions emiting one of these schemas will almost
certainly also emit a rd/msg/body schema which should be used.

** Fields **

headers: a dictionary holding all headers.  Header names have been lower-cased
and duplicate headers concatenated

text: only exists for non-multipart messages with a main content-type of text.

multipart_info: A list of dictionaries, with each element having elements:
  name: The name of the attachment which holds the data for this part.
  headers: A dictionary holding the headers for this sub-part.
  content_type: The type of the content stored in the attachment

rd/msg/conversation:
--------------------
** Fields**

conversation_id: a string which identifies the conversation.

IDENTITIES AND CONTACTS:
========================

rd/contact:
** Fields **
name:


rd/identity/exists:
-------------------
** Fields **

This schema has no fields!  It could have 'identity_id', but the 'rd_key'
for such schemas is always ['identity', identity_id_value].

NOTE: Schemas with no fields are treated specially by the framework; such
records are considered an 'assertion' the object key exists, so conflict
errors are ignored when attempting to write them.

rd/identity:
------------
** Notes **
This is a 'normalized schema' - its a set of fields that any identity provider
might be able to fetch.

** Fields **

name: A display name?
nickname: nickname
url: user's home page
image: Either a URL or reference to an attachment.

rd/identity/contacts:
---------------------
** Fields **
contacts: A list of (contact_id, relationship_name) tuples, where
'relationship_name' can be None or may help differentiate things like phone
numbers or email addresses.


rd/identity/skype:
rd/identity/twitter:
--------------------

"Private" schemas - whatever the identity fetchers want to store.
