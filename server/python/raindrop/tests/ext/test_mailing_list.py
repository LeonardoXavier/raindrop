from twisted.internet import defer

from raindrop.tests import TestCaseWithCorpus

# Cases to test:
#
# * a message from a list: the rd.msg.email.mailing-list and rd.mailing-list
#   docs should be created with the appropriate properties;
#
# * a message that updates a list: the list properties should be updated;
#
# The rest of these testcases need to be run separately for Google Groups
# and Mailman lists, since the unsubscription code for those two kinds of lists
# isn't shared between them.  At some point it might be possible to factor out
# some of their code, however, at which point we may be able to merge some of
# the tests.
#
# * a message from a list followed by a newer unsubscribe confirmation:
#   the list state should become "unsubscribed";
#
# * a message from a list followed by an older unsubscribe confirmation:
#   the list state should remain "subscribed";
#
# * an unsubscribe confirmation followed by a newer message from the list:
#   the list state should become "subscribed";
#
# * an unsubscribe confirmation followed by an older message from the list:
#   the list state should remain "unsubscribed";
#
# * an unsubscribe confirmation for a non-existing list: the list doc should
#   be created, and its state should be "unsubscribed" (because we expect to
#   later process some older messages from the list and want to make sure they
#   show up as being from an unsubscribed list);
#
# * an unsubscribe confirmation for a non-existing list followed by an older
#   message from the list: the list state should remain "unsubscribed";
#
# * an unsubscribe confirmation for a non-existing list followed by a newer
#   message from the list: the list state should become "subscribed";
#
# * an unsubscribe confirm request for a list in the "unsubscribe-pending"
#   state: an rd.msg.outgoing.simple doc should be created with the appropriate
#   properties; the list state should become "unsubscribe-confirmed";

class TestSimpleCorpus(TestCaseWithCorpus):
    def ensure_doc(self, doc, expected_doc):
        # Generate a list of the properties of the document.
        # We ignore private properties of CouchDB (start with underscore)
        # and Raindrop (start with "rd_"), as we are only testing the public
        # properties generated by our extension.
        actual_properties = sorted([key for key in doc.keys()
                                        if not key.startswith('_')
                                        and not key.startswith('rd_')])

        expected_properties = sorted([key for key in expected_doc.keys()])

        # The document should have the expected properties.
        self.failUnlessEqual(actual_properties, expected_properties,
                             repr(doc['rd_key']) + ' properties')

        # The document's properties should have the expected values.
        for property in expected_doc:
            self.failUnlessEqual(doc[property], expected_doc[property],
                                 repr(doc['rd_key']) + '::' + property)

    @defer.inlineCallbacks
    def get_docs(self, key, expected=None):
        result = yield self.doc_model.open_view(key=key, reduce=False,
                                                include_docs=True)
        rows = result['rows']
        if expected is not None:
            self.failUnlessEqual(len(rows), expected,
                                 'num rows for key ' + repr(key))
        docs = [row['doc'] for row in rows]
        defer.returnValue(docs)

    @defer.inlineCallbacks
    def put_docs(self, corpus_name, corpus_spec="*", expected=None):
        docs = [d for d in self.gen_corpus_docs(corpus_name, corpus_spec)]
        if expected is not None:
            self.failUnlessEqual(len(docs), expected)
        _ = yield self.doc_model.db.updateDocuments(docs)
        _ = yield self.pipeline.start()

    @defer.inlineCallbacks
    def test_mailing_list(self):
        # Initialize the corpus & database.
        yield self.init_corpus('hand-rolled')

        # Process one message from a mailing list.
        yield self.put_docs('hand-rolled', 'mailing-list-email-simple', 1)

        mail_key = ['rd.core.content', 'schema_id', 'rd.msg.email.mailing-list']
        list_key = ['rd.core.content', 'schema_id', 'rd.mailing-list']

        # There should be one rd.msg.email.mailing-list document.
        doc = (yield self.get_docs(mail_key, expected=1))[0]

        # The document should have the expected properties/values.
        expected_doc = {
            'list_id': 'test.lists.example.com'
        }
        self.ensure_doc(doc, expected_doc)

        # There should be one rd.mailing-list document.
        doc = (yield self.get_docs(list_key, expected=1))[0]

        # The document should have the expected properties/values.
        expected_doc = {
            'changed_timestamp': 1251344732,
            'help': 'mailto:test-request@lists.example.com?subject=help',
            'id': 'test.lists.example.com',
            'identity': ['email', 'raindrop_test_user@mozillamessaging.com'],
            'name': 'test list ',
            'post': 'mailto:test@lists.example.com',
            'status': 'subscribed',
            'subscribe': 'https://lists.example.com/listinfo/test>,\n\t' +
                '<mailto:test-request@lists.example.com?subject=subscribe',
            'unsubscribe': 'https://lists.example.com/options/test>,\n\t' +
                '<mailto:test-request@lists.example.com?subject=unsubscribe',
        }
        self.ensure_doc(doc, expected_doc)

        # Process a second, later message from the same mailing list.
        yield self.put_docs('hand-rolled', 'mailing-list-email-simple-2', 1)

        # There should now be two rd.msg.email.mailing-list documents.
        yield self.get_docs(mail_key, expected=2)

        # There should only be one rd.msg.email.mailing-list document
        # with the key of the message we just processed.
        message_key = ['rd.core.content', 'key-schema_id',
                [['email', '40c05b9d93ba4695a30e72174c5c8126@example.com'],
                'rd.msg.email.mailing-list']]
        doc = (yield self.get_docs(message_key, expected=1))[0]

        # The document should have the expected properties/values.
        expected_doc = {
            'list_id': 'test.lists.example.com'
        }
        self.ensure_doc(doc, expected_doc)

        # There should still be just one rd.mailing-list document.
        doc = (yield self.get_docs(list_key, expected=1))[0]

        # The document should have the expected properties/values.
        #
        # Some of these properties (subscribe, unsubscribe) have changed
        # in the new message and should have been updated in the doc;
        # another (post) hasn't changed and should have the same value;
        # one (help) wasn't provided by the second message at all, so we leave
        # its original value in place (some lists don't provide all List-*
        # headers when they send admin messages, but that shouldn't cause us
        # to remove their properties); and one (archive) is new and should have
        # been added to the doc.
        #
        # Finally, since the list doc has been changed, its changed timestamp
        # should have been updated to the date of the second message.
        #
        expected_doc = {
            'archive': 'https://lists.example.com/archive/thetest',
            'changed_timestamp': 1251401696,
            'help': 'mailto:test-request@lists.example.com?subject=help',
            'id': 'test.lists.example.com',
            'identity': ['email', 'raindrop_test_user@mozillamessaging.com'],
            'name': 'the test list ',
            'post': 'mailto:test@lists.example.com',
            'status': 'subscribed',
            'subscribe': 'https://lists.example.com/listinfo/thetest>,\n\t' +
                '<mailto:thetest-request@lists.example.com?subject=subscribe',
            'unsubscribe': 'https://lists.example.com/options/thetest>,\n\t' +
                '<mailto:thetest-request@lists.example.com?subject=unsubscribe',
        }
        self.ensure_doc(doc, expected_doc)
