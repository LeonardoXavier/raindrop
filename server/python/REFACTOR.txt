Notes about what we need to refactor in the python backend:

Front-end visible changes:
--------------------------

* 'timestamp' and all time fields need to use a common format.

* document['type'] should become a tuple of category, type; 
  document['raindrop_category'] should die.
  Better: consider a triple of ['raindrop', cat, type] - canonical test for
  'our' document becomes "doc['type'].length==3 && doc['type'][0]=='raindrop'"?
  XXX - may not be visible if only views are used???

* All type strings need rethinking - there was an early goal to have a kind 
  of 'sub-class' relationship (eg, "message" was a subclass of "message/raw")
  but that never eventuated.
  XXX - may not be visible if only views are used???

* Document IDs:

  - The base64 encoded part is unique per provider, but this will break when
    2 providers may share the same per-provider part.  identities all start 
    with 'id/{prov_id}/identity and there are already clashes there, which the
    identity worker hacks around - see IdentitySpawnerWQ.get_prov_id()

  - Consider: letting the protocol provide an object, and we do the json
    dump before the base64??

  - drop 'contact_id' and 'identity_id, instead stick with 'provider_id' or 
    something used by *all* docs.  That will allow for a single view to map 
    from the provider ID for an object map to an object.  
    (eg, contact guid -> contact record, etc)


View-only visible changes:
--------------------------

These are changes which are only 'externally' visible as far as views; in 
other words, changes which are not externally visible if every view works as
expected...


Internally visible changes:
---------------------------

These changes don't affect the front-end.

create_raw_docs, create_ext_docs, and the whole 'doc info' tuple thing isn't 
working.  Consider just a 'fill_doc' function to manage the IDs etc.

raw/message/rfc822 makes some attempt to get a 'body' and stores the rest in 
attachments.  But raw/message/email then reprocesses these attachments 
looking for text parts to make a more complete body.  We should consider 
having rfc822 store everything in attachments and all 'text part' handing in 
the same place.
